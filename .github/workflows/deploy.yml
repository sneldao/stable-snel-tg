name: Deploy to Hetzner

on:
  push:
    branches: [master]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install SSH key
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.HETZNER_SSH_KEY }}

      - name: Add known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -t rsa,ecdsa,ed25519 ${{ secrets.HETZNER_HOST }} >> ~/.ssh/known_hosts

      - name: Setup deployment directory
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HETZNER_HOST }}
          username: ${{ secrets.HETZNER_USERNAME }}
          key: ${{ secrets.HETZNER_SSH_KEY }}
          script: |
            # Create the deployment directory with correct permissions
            sudo mkdir -p /opt/snel-telegram
            # Change ownership to current user for deployment
            sudo chown -R $USER:$USER /opt/snel-telegram
            cd /opt/snel-telegram
            # Backup existing deployment if it exists
            if [ -f docker-compose.yml ]; then
              timestamp=$(date +%Y%m%d_%H%M%S)
              mkdir -p backups/$timestamp
              cp -r * backups/$timestamp/ 2>/dev/null || true
            fi
            # Fix potential permission issues with Docker
            sudo chmod -R 755 /opt/snel-telegram

      - name: Copy deployment files
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HETZNER_HOST }}
          username: ${{ secrets.HETZNER_USERNAME }}
          key: ${{ secrets.HETZNER_SSH_KEY }}
          source: "bot.py,docker-compose.yml,Dockerfile,requirements.txt"
          target: "/opt/snel-telegram"
          strip_components: 0
          overwrite: true

      - name: Deploy and verify
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HETZNER_HOST }}
          username: ${{ secrets.HETZNER_USERNAME }}
          key: ${{ secrets.HETZNER_SSH_KEY }}
          script: |
            set -e
            cd /opt/snel-telegram

            # Create .env file
            echo "BOT_TOKEN=${{ secrets.BOT_TOKEN }}" > .env

            # Fix permissions for Docker
            if getent group docker > /dev/null; then
              # If docker group exists, add current user to it if needed
              sudo usermod -aG docker $USER 2>/dev/null || true
              # Set group permissions for Docker
              sudo chown -R $USER:docker .
            else
              # Otherwise, just ensure current user has full access
              sudo chown -R $USER:$USER .
            fi
            sudo chmod -R 755 .

            # Verify user can run Docker
            echo "Docker permissions:"
            id
            groups

            # Stop existing container (force kill if stuck)
            echo "Stopping any existing containers..."
            sudo docker compose down -v --remove-orphans || true
            sudo docker rm -f snel-telegram-bot 2>/dev/null || true

            # Clean up unused Docker resources to prevent disk space issues
            echo "Cleaning up Docker resources..."
            sudo docker system prune -f

            # Build and start new container with debug output
            echo "Building and starting new container..."
            sudo docker compose build --no-cache
            sudo docker compose up -d

            # Wait for container to initialize
            echo "Waiting for container to start..."
            sleep 10

            # Verify container is running
            if sudo docker ps | grep -q snel-telegram-bot; then
              echo "Container successfully started!"
              sudo docker compose logs --tail=50
            else
              echo "Container failed to start. Debug information:"
              sudo docker compose logs
              sudo docker ps -a
              exit 1
            fi
