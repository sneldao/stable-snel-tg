name: Deploy to Hetzner

on:
  push:
    branches: [master]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.HETZNER_SSH_KEY }}
          known_hosts: "just-a-placeholder-so-we-dont-get-errors"
          if_key_exists: replace

      - name: Add known hosts
        run: |
          ssh-keyscan -H ${{ secrets.HETZNER_HOST }} >> ~/.ssh/known_hosts

      - name: Setup deployment directory
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HETZNER_HOST }}
          username: ${{ secrets.HETZNER_USERNAME }}
          key: ${{ secrets.HETZNER_SSH_KEY }}
          script: |
            mkdir -p /opt/snel-telegram
            cd /opt/snel-telegram
            # Backup existing deployment if it exists
            if [ -f docker-compose.yml ]; then
              timestamp=$(date +%Y%m%d_%H%M%S)
              mkdir -p backups/$timestamp
              cp -r * backups/$timestamp/ 2>/dev/null || true
            fi
            # Ensure correct permissions
            sudo chown -R $USER:$USER /opt/snel-telegram

      - name: Copy deployment files
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HETZNER_HOST }}
          username: ${{ secrets.HETZNER_USERNAME }}
          key: ${{ secrets.HETZNER_SSH_KEY }}
          source: "bot.py,docker-compose.yml,Dockerfile,requirements.txt"
          target: "/opt/snel-telegram"
          strip_components: 0
          overwrite: true

      - name: Deploy and verify
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HETZNER_HOST }}
          username: ${{ secrets.HETZNER_USERNAME }}
          key: ${{ secrets.HETZNER_SSH_KEY }}
          script: |
            set -e
            cd /opt/snel-telegram

            # Create .env file
            echo "BOT_TOKEN=${{ secrets.BOT_TOKEN }}" > .env

            # Store the ID of the currently running container (if any)
            OLD_CONTAINER_ID=$(docker ps -q -f name=snel-telegram-bot)

            # Stop existing container
            docker compose down || true

            # Ensure docker can access the files
            sudo chown -R $USER:$USER .

            # Build and start new container
            if ! docker compose up -d --build; then
              echo "Failed to start new container, rolling back..."
              if [ ! -z "$OLD_CONTAINER_ID" ]; then
                # Restore old container
                docker start $OLD_CONTAINER_ID
              fi
              # Show docker logs for debugging
              echo "Build logs:"
              docker compose logs --tail=100
              exit 1
            fi

            # Wait for container to be healthy
            echo "Waiting for container to start..."
            sleep 5

            # Check if container is running
            if ! docker ps | grep -q snel-telegram-bot; then
              echo "Container failed to start, checking logs..."
              docker compose logs --tail=100
              exit 1
            fi

            # Show logs
            echo "Deployment successful! Container logs:"
            docker compose logs --tail=50
