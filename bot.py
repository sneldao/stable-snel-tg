import asyncio
import os
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from telegram.handlers.price_handlers import PriceHandlers
from telegram.handlers.info_handlers import InfoHandlers
from telegram.handlers.news_handlers import NewsHandlers
from telegram.handlers.analysis_handlers import AnalysisHandlers
from datetime import datetime

# Load environment variables
load_dotenv()

# Get the token from environment variable
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')

if not TOKEN:
    raise ValueError("No token provided. Please set TELEGRAM_BOT_TOKEN in your .env file")

# Initialize handlers
price_handlers = PriceHandlers()
info_handlers = InfoHandlers()
news_handlers = NewsHandlers()
analysis_handlers = AnalysisHandlers()

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        'ðŸ‘‹ Welcome to the Crypto Info Bot!\n\n'
        'I can help you with:\n'
        'â€¢ Real-time cryptocurrency prices\n'
        'â€¢ Market data and charts\n'
        'â€¢ Coin information and statistics\n'
        'â€¢ News and events\n'
        'â€¢ Technical analysis\n\n'
        'Type /help to see all available commands and features.'
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        'ðŸ“š Available Commands:\n\n'
        'Price Commands:\n'
        'â€¢ /p <coin> - Get current price\n'
        'â€¢ /s <coin> - Get detailed price info\n'
        'â€¢ /c <coin> [days] - Get price chart\n'
        'â€¢ /cs <coin> [days] - Get candlestick chart\n\n'
        'Market Commands:\n'
        'â€¢ /top [limit] - List top coins\n'
        'â€¢ /best <24h|7d> - Best performers\n'
        'â€¢ /worst <24h|7d> - Worst performers\n\n'
        'Information Commands:\n'
        'â€¢ /i <coin> - General information\n'
        'â€¢ /des <coin> - Coin description\n'
        'â€¢ /dev <coin> - Development info\n'
        'â€¢ /t <coin> - Team information\n'
        'â€¢ /wp <coin> - Find whitepaper\n\n'
        'News & Events:\n'
        'â€¢ /n <coin> - Latest news\n'
        'â€¢ /soc <coin> - Social media links\n'
        'â€¢ /ev <coin> - Upcoming events\n\n'
        'Technical Analysis:\n'
        'â€¢ /ch <coin> [period] - Price change\n'
        'â€¢ /roi <coin> - Return on Investment\n'
        'â€¢ /ath <coin> - All Time High analysis\n\n'
        'Utility Commands:\n'
        'â€¢ /about - About the bot\n'
        'â€¢ /help - Show this help message\n'
        'â€¢ /status - Check bot status'
    )

async def about_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        'ðŸ¤– About Crypto Info Bot\n\n'
        'A comprehensive cryptocurrency information bot that provides:\n\n'
        'â€¢ Real-time price data and market statistics\n'
        'â€¢ Technical analysis with price charts\n'
        'â€¢ Detailed coin information and team data\n'
        'â€¢ News, events, and social media links\n'
        'â€¢ Development metrics and whitepaper links\n\n'
        'Data powered by CoinGecko API\n'
        'Built with Python and python-telegram-bot'
    )

async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        'âœ… Bot Status: Online\n\n'
        'All systems operational\n'
        'API connections: Active\n'
        'Last update: ' + datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')
    )

async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(update.message.text)

def main():
    # Create the Application
    application = Application.builder().token(TOKEN).build()

    # Add handlers
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("about", about_command))
    application.add_handler(CommandHandler("status", status_command))
    
    # Price handlers
    application.add_handler(CommandHandler("p", price_handlers.price_command))
    application.add_handler(CommandHandler("s", price_handlers.detailed_price_command))
    application.add_handler(CommandHandler("c", price_handlers.chart_command))
    application.add_handler(CommandHandler("cs", price_handlers.candlestick_command))
    application.add_handler(CommandHandler("top", price_handlers.top_command))
    application.add_handler(CommandHandler("best", price_handlers.movers_command))
    application.add_handler(CommandHandler("worst", price_handlers.movers_command))
    
    # Info handlers
    application.add_handler(CommandHandler("i", info_handlers.info_command))
    application.add_handler(CommandHandler("des", info_handlers.description_command))
    application.add_handler(CommandHandler("dev", info_handlers.development_command))
    application.add_handler(CommandHandler("t", info_handlers.team_command))
    application.add_handler(CommandHandler("wp", info_handlers.whitepaper_command))
    
    # News handlers
    application.add_handler(CommandHandler("n", news_handlers.news_command))
    application.add_handler(CommandHandler("soc", news_handlers.social_command))
    application.add_handler(CommandHandler("ev", news_handlers.events_command))
    
    # Analysis handlers
    application.add_handler(CommandHandler("ch", analysis_handlers.price_change_command))
    application.add_handler(CommandHandler("roi", analysis_handlers.roi_command))
    application.add_handler(CommandHandler("ath", analysis_handlers.ath_command))
    
    # Echo handler for any other text
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))

    # Start the bot
    print("Bot is starting...")
    application.run_polling()

if __name__ == '__main__':
    main() 